using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class pls3sphere : MonoBehaviour
{
    //Use to switch between Force Modes
    enum ModeSwitching { Start, Impulse, Acceleration, Force, VelocityChange };
    ModeSwitching m_ModeSwitching;

    Vector3 m_StartPos, m_StartForce;
    Vector3 m_NewForce;
    Rigidbody m_Rigidbody;

    string m_ForceXString = string.Empty;
    string m_ForceYString = string.Empty;
    string m_ForceZString = string.Empty; //added line

    //added these 3
    string m_ForceX1String = string.Empty;
    string m_ForceY1String = string.Empty;
    string m_ForceZ1String = string.Empty; 

    float m_ForceX, m_ForceY, m_ForceZ; //added m_ForceY
    float m_Result;


    void Start()
    {
        //You get the Rigidbody component you attach to the GameObject
        m_Rigidbody = GetComponent<Rigidbody>();

        //This starts at first mode (nothing happening yet)
        m_ModeSwitching = ModeSwitching.Start;

        //Initialising the force which is used on GameObject in various ways
        m_NewForce = new Vector3(-5.0f, 1.0f, -5.0f); //changed z from 0.0 to -5.0

        //Initialising floats
        m_ForceX = 0;
        m_ForceY = 0;
        m_ForceZ = 0; //added line

        //The forces typed in from the text fields (the ones you can manipulate in Game view)
        //tests
        m_ForceX1String = "0"; //row
        m_ForceY1String = "0"; //theta
        m_ForceZ1String = "0"; //psi

        m_ForceXString = "0";
        m_ForceYString = "0";
        m_ForceZString = "0"; //added line

        //The GameObject's starting position and Rigidbody position
        m_StartPos = transform.position;
        m_StartForce = m_Rigidbody.transform.position;
    }

    void FixedUpdate()
    {
        //If the current mode is not the starting mode (or the GameObject is not reset), the force can change
        if (m_ModeSwitching != ModeSwitching.Start)
        {
            //The force changes depending what you input into the text fields
            m_NewForce = new Vector3(m_ForceX, m_ForceY, m_ForceZ); //added m_ForceZ
        }

        //Here, switching modes depend on button presses in the Game mode
		switch (m_ModeSwitching) {
		//This is the starting mode which resets the GameObject
		case ModeSwitching.Start:
                //This resets the GameObject and Rigidbody to their starting positions
			transform.position = m_StartPos;
			m_Rigidbody.transform.position = m_StartForce;

                //This resets the velocity of the Rigidbody
			m_Rigidbody.velocity = new Vector3 (0f, 0f, 0f);
			break;

		//These are the modes ForceMode can force on a Rigidbody
		//This is Acceleration mode
		case ModeSwitching.Acceleration:
                //The function converts the text fields into floats and updates the Rigidbody’s force
			MakeCustomForce ();

                //Use Acceleration as the force on the Rigidbody
			m_Rigidbody.AddForce (m_NewForce, ForceMode.Acceleration);
			break;

		//This is Force Mode, using a continuous force on the Rigidbody considering its mass
		case ModeSwitching.Force:
                //Converts the text fields into floats and updates the force applied to the Rigidbody
			MakeCustomForce ();

                //Use Force as the force on GameObject’s Rigidbody
			m_Rigidbody.AddForce (m_NewForce, ForceMode.Force);
			break;

		//This is Impulse Mode, which involves using the Rigidbody’s mass to apply an instant impulse force.
		case ModeSwitching.Impulse:
                //The function converts the text fields into floats and updates the force applied to the Rigidbody
			MakeCustomForce ();

                //Use Impulse as the force on GameObject
			m_Rigidbody.AddForce (m_NewForce, ForceMode.Impulse);
			break;


		//This is VelocityChange which involves ignoring the mass of the GameObject and impacting it with a sudden speed change in a direction
		case ModeSwitching.VelocityChange:
                //Converts the text fields into floats and updates the force applied to the Rigidbody
			MakeCustomForce ();

                //Make a Velocity change on the Rigidbody
			m_Rigidbody.AddForce (m_NewForce, ForceMode.VelocityChange);
			break;
		}
			
    }

    //The function outputs buttons, text fields, and other interactable UI elements to the Scene in Game view
    void OnGUI()
    {
        //Getting the inputs from each text field and storing them as strings
        
        //made these three x1, y1, z1 for the input rou, theta, and psi
        m_ForceX1String = GUI.TextField(new Rect(200, 5, 20, 20), m_ForceX1String, 25); //convert these cartesian to spherical coordinates
        m_ForceY1String = GUI.TextField(new Rect(200, 35, 20, 20), m_ForceY1String, 25);
        m_ForceZ1String = GUI.TextField(new Rect(200, 65, 20, 20), m_ForceZ1String, 25); //added line

        //convert spherical to cartesian
        //m_ForceXString = sqrt(x1^2+y1^2+z1^2)
        //m_ForceYString = arctan(y1/x1)
        //m_ForceZString = arccos(z1/(x))

        //Press the button to reset the GameObject and Rigidbody
        if (GUI.Button(new Rect(0, 210, 120, 30), "Reset (Y button)"))//moved to the left (changed 0 to 100)
        {
            //This switches to the start/reset case
            m_ModeSwitching = ModeSwitching.Start;
        }

        //If you press the Impulse button
        if (GUI.Button(new Rect(0, 90, 90, 30), "Confirm (LB)"))//used apply acceleration's location, moved to the left
        {
            //Switch to impulse (apply impulse forces to GameObject)//maybe try the force function instead
            m_ModeSwitching = ModeSwitching.Impulse;
        }

        //dummy buttons to simulate a controller
        if (GUI.Button(new Rect(20, 0, 180, 30), "Input speed (A button)"))
        {
            //left blacnk for now, dummy button
        }

        //dummy buttons to simulate a controller
        if (GUI.Button(new Rect(0, 30, 200, 30), "Input vertical angle (B button)"))
        {
            //left blacnk for now, dummy button
        }

        //dummy buttons to simulate a controller
        if (GUI.Button(new Rect(0, 60, 200, 30), "Input Horizontal angle (X button)"))
        {
            //left blacnk for now, dummy button
        }

    }

    //Changing strings to floats for the forces
    float ConvertToFloat(string Name)
    {
        float.TryParse(Name, out m_Result);
        return m_Result;
    }

    //Set the converted float from the text fields as the forces to apply to the Rigidbody
    void MakeCustomForce()
    {
        //This converts the strings to floats
        m_ForceX = ConvertToFloat(m_ForceXString);
        m_ForceY = ConvertToFloat(m_ForceYString);
        m_ForceZ = ConvertToFloat(m_ForceZString); //added line
    }

	//this should take the 4 face buttons and turn each into a set launch
	void inputButtons()
	{
		if (Input.GetButtonDown (KeyCode.A)) {
			//launch straight
			m_ForceX1String = 3;
			m_ForceY1String = 0;
			m_ForceZ1String = 0;
		}
		if (Input.GetButtonDown (KeyCode.X)) {
			//launch 45 left
			m_ForceX1String = 3;
			m_ForceY1String = 3;
			m_ForceZ1String = 0;
		}
		if (Input.GetButtonDown (KeyCode.B)) {
			//launch 45 right
			m_ForceX1String = 3;
			m_ForceY1String = -3;
			m_ForceZ1String = 0;
		}
		if (Input.GetButtonDown (KeyCode.Y)) {
			//launch 45 up
			m_ForceX1String = 3;
			m_ForceY1String = 0;
			m_ForceZ1String = 1;
		}
	}
}
